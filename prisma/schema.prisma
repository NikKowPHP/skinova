generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum SkinType {
  NORMAL
  OILY
  DRY
  COMBINATION
  SENSITIVE
}

enum ConcernSeverity {
  MILD
  MODERATE
  SEVERE
}

// USER & AUTH
model User {
  id                 String    @id
  email              String    @unique
  supabaseAuthId     String    @unique
  status             String    @default("ACTIVE") // e.g., ACTIVE, DELETION_PENDING

  // Skin Profile
  skinType           SkinType?
  primaryConcern     String?

  // Monetization
  stripeCustomerId   String? @unique
  subscriptionTier   String  @default("FREE")
  subscriptionStatus String?

  // Onboarding
  onboardingCompleted Boolean @default(false)

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  scans              SkinScan[]
  routine            Routine?
  consultations      Consultation[]
}

// CORE SCAN & ANALYSIS
model SkinScan {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  imageUrl  String   @db.Text // Encrypted signed URL from storage
  notes     String?  @db.Text // Encrypted user notes

  analysisStatus String  @default("PENDING") // PENDING, COMPLETED, FAILED
  analysisError  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  analysis      SkinAnalysis?
  consultations Consultation[]
}

model SkinAnalysis {
  id            String   @id @default(cuid())
  scanId        String   @unique
  scan          SkinScan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  // AI Output
  overallScore  Int
  analysisJson  String   @db.Text // Encrypted structured JSON with detailed analysis
  rawAiResponse String   @db.Text // Encrypted raw AI response for debugging/retries

  createdAt     DateTime @default(now())

  // Relations
  concerns      IdentifiedConcern[]
}

model IdentifiedConcern {
  id          String          @id @default(cuid())
  analysisId  String
  analysis    SkinAnalysis    @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  name        String          // e.g., "Acne", "Hyperpigmentation"
  severity    ConcernSeverity
  description String          @db.Text

  // For mapping to the image
  boundingBoxJson String? // JSON string of coordinates for highlighting on the image
}

// ROUTINE & PRODUCTS
model Routine {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  steps     RoutineStep[]
}

model RoutineStep {
  id          String   @id @default(cuid())
  routineId   String
  routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)

  productId   String
  product     Product  @relation(fields: [productId], references: [id])

  stepNumber  Int
  timeOfDay   String   // "AM" or "PM"
  instructions String  @db.Text // e.g., "Apply a pea-sized amount"
}

model Product {
  id          String        @id @default(cuid())
  name        String        @unique
  brand       String?
  type        String        // e.g., "Cleanser", "Serum", "Moisturizer"
  description String        @db.Text
  imageUrl    String?       @db.Text
  purchaseUrl String?       @db.Text
  tags        String[]      @default([]) // e.g., ["for-oily-skin", "acne-prone", "hydrating"]

  // Relations
  routines    RoutineStep[]
}

// CONSULTATIONS (Pay-per-use)
model Consultation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanId    String
  scan      SkinScan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  status    String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  stripePaymentId String? @unique
  
  notes     String? @db.Text // Encrypted notes from the dermatologist

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UTILITY MODELS (Inherited from Lexity)
model ProcessedWebhook {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  createdAt DateTime @default(now())
}

model SystemSetting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}